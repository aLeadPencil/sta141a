1954%%100
1954 %% 20
1954 %% 30
1954 %% 10
1954 %% 54
1954 %% 3
1954 %% 4
1954/1000
1954/100
x = c('1' , '2')
x = [1, 2]
y = c(4*x)
y = c(x, x, x, x)
x = '4'
y = c(x, x, x, x)
?rep
y = rep(x)
y = rep(x, 5)
library(forecast)
library(readxl)
#1b
sigma2 = 0.8383
#1c
psi = ARMAtoMA(ar = c(-1.5378, -0.7726), lag.max = 100)
pred_val = c(6.973, 6.958, 7.088, 6.908, 7.076)
plot(psi); abline(h = 0)
fcast_var = sapply(X = 1:5, FUN = function(j){(1 + sum(psi[0:(j-1)] ^ 2)) * sigma2})
#1d
upper = pred_val + qnorm(0.975) * sqrt(fcast_var)
lower = pred_val - qnorm(0.975) * sqrt(fcast_var)
#1e
actual_val = c(6.8340, 6.7434, 6.4144, 7.7644, 3.2322)
plot.ts(actual_val, ylim = c(0, 15), main = 'actual vs predicted values with confidence bands')
lines(x = (1:5), y = pred_val, col = 'blue')
lines(x = 0 + (1:5), y = upper, col = 'red')
lines(x = 0 + (1:5), y = lower, col = 'red')
#2a
data = read_excel("D:/School Stuff/Math/Stats 137/HW 6/deaths-from-homicides-and-suicid.xls",
skip = 10)
# tsdisplay(data[,2], main = "Time Series Plot of Data")
ts.plot(data[,2], main = "Time Series Plot of Data", ylab = "Deaths")
acf(data[,2], main = "Acf Plot of Data")
pacf(data[,2], main = "Pacf Plot of Data")
#2b
auto.arima(data[,2])
# Best Model = ARMA(1, 0, 1)
fitted_model = arima(data[,2], order = c(1, 0, 1))
acf(fitted_model$residuals, main = 'fitted model ACF')
#2c
# tsdisplay(residuals(test), main = "Time Series Plot of Fitted Model (1,0,1)")
ts.plot(fitted_model$residuals, ylab = "residuals", main = "Time Series Plot of Fitted Model")
Acf(fitted_model$residuals)
#2d
n = 85
xnew = data[-(1:n), 2]
pacf(fitted_model$residuals)
fitted_model2 = arima(x, order = c(1, 0, 1))
fcast <- predict(fitted_model2, n.ahead = 5)
x_fc <- fcast$pred
plot.ts(data[,2], main = "Time Series Plot of Data + Prediction")
x = data[1:n, 2]
lines(x = n + (1:5), y = x_fc, col='red', lwd = 2)
source('D:/School Stuff/Math/Stats 137/HW 6/HW 6.R', echo=TRUE)
library(readxl)
data = read_excel("D:/School Stuff/Math/Stats 137/HW 6/deaths-from-homicides-and-suicid.xls",
skip = 10)
library(astsa)
install.packages('astsa')
library(astsa)
library(forecast)
library(readxl)
data = read_excel("D:/School Stuff/Math/Stats 137/HW 6/deaths-from-homicides-and-suicid.xls",
skip = 10)
#1a
#Raw Periodogram
spec.pgram(x, log='no')
#1a
#Raw Periodogram
spec.pgram(data[,2], log='no')
data[,2]
data = read_excel("D:/School Stuff/Math/Stats 137/HW 6/deaths-from-homicides-and-suicid.xls",
skip = 10)[,2]
View(data)
View(data)
#1a
#Raw Periodogram
spec.pgram(data, log='no')
#1a
#Raw Periodogram
spec.pgram(data, log ='no', main = 'Raw Periodogram')
#1a
#Raw Periodogram
spec.pgram(data, log ='no')#, main = 'Raw Periodogram')
spec.pgram(data, log = "no", spans = 5)
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
#1a
#Raw Periodogram
spec.pgram(data, log ='no')#, main = 'Raw Periodogram')
spec.pgram(data, log = "no", spans = 15, main ='Smoothed Periodogram Span = 15')
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
spec.pgram(data, log = "no", spans = 15, main ='Smoothed Periodogram Span = 15')
spec.pgram(data, log = "no", spans = 23, main ='Smoothed Periodogram Span = 23')
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
spec.pgram(data, log = "no", spans = 15, main ='Smoothed Periodogram Span = 15')
spec.pgram(data, log = "no", spans = 23, main ='Smoothed Periodogram Span = 23')
ts.plot(data)
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
spec.pgram(data, log = "no", spans = 15, main ='Smoothed Periodogram Span = 15')
spec.pgram(data, log = "no", spans = 23, main ='Smoothed Periodogram Span = 23')
#1a
par(mfrow=c(4,1))
spec.pgram(data, log ='no')#, main = 'Raw Periodogram')
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
spec.pgram(data, log = "no", spans = 15, main ='Smoothed Periodogram Span = 15')
spec.pgram(data, log = "no", spans = 23, main ='Smoothed Periodogram Span = 23')
#1a
par(mfrow = c(3,1))
spec.pgram(data, log ='no')#, main = 'Raw Periodogram')
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
spec.pgram(data, log = "no", spans = 15, main ='Smoothed Periodogram Span = 15')
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
spec.pgram(data, log = "no", spans = 15, main ='Smoothed Periodogram Span = 15')
spec.pgram(data, log = "no", spans = 23, main ='Smoothed Periodogram Span = 23')
ts.plot(data)
dev.off()
ts.plot(data)
spec.pgram(data, log ='no')#, main = 'Raw Periodogram')
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
spec.pgram(data, log = "no", spans = 15, main ='Smoothed Periodogram Span = 15')
spec.pgram(data, log = "no", spans = 23, main ='Smoothed Periodogram Span = 23')
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
spec.pgram(data, log = "no", spans = 15, main ='Smoothed Periodogram Span = 15')
spec.pgram(data, log ='no')#, main = 'Raw Periodogram')
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
spec.pgram(data, log = "no", spans = 15, main ='Smoothed Periodogram Span = 15')
spec.pgram(data, log = "no", spans = 23, main ='Smoothed Periodogram Span = 23')
spec.pgram(data, log ='no')#, main = 'Raw Periodogram')
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
spec.pgram(data, log ='no')#, main = 'Raw Periodogram')
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
spec.pgram(data, log ='no')#, main = 'Raw Periodogram')
data = read_excel("D:/School Stuff/Math/Stats 137/HW 6/deaths-from-homicides-and-suicid.xls",
skip = 10)#[,2]
View(data)
data = read_excel("D:/School Stuff/Math/Stats 137/HW 6/deaths-from-homicides-and-suicid.xls",
skip = 10)[,2]
#1a
par(mfrow = c(3,1))
dev.off()
model = auto.arima(data, stepwise = F, approximation = F)
spec.pgram(model, log = 'no')
spec.pgram(model$residuals, log = 'no')
spec.pgram(model$residuals, log = 'no', spans = 7)
spec.pgram(model$residuals, log = 'no', spans = 15)
spec.pgram(model$residuals, log = 'no', spans = 23)
spec.pgram(model$residuals, log = 'no', spans = 7)
spec.pgram(model$residuals, log = 'no', spans = 15)
spec.pgram(model$residuals, log = 'no', spans = 23)
spec.pgram(model$residuals, log = 'no')
auto.arima(data, stepwise = F, approximation = F)
#2a
data = read_excel("D:/School Stuff/Math/Stats 137/HW 6/deaths-from-homicides-and-suicid.xls",
skip = 10)
# tsdisplay(data[,2], main = "Time Series Plot of Data")
ts.plot(data[,2], main = "Time Series Plot of Data", ylab = "Deaths")
acf(data[,2], main = "Acf Plot of Data")
pacf(data[,2], main = "Pacf Plot of Data")
#2b
auto.arima(data[,2])
# Best Model = ARMA(1, 0, 1)
fitted_model = arima(data[,2], order = c(1, 0, 1))
fitted_model$residuals
auto.arima(data[,2])$residuals
?same
?similar
?equal
?identical
identical(auto.arima(data[,2])$residuals, fitted_model$residuals)
library(astsa)
library(forecast)
library(readxl)
data = read_excel("D:/School Stuff/Math/Stats 137/HW 6/deaths-from-homicides-and-suicid.xls",
skip = 10)[,2]
spec.pgram(data, log ='no')#, main = 'Raw Periodogram')
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
spec.pgram(data, log = "no", spans = 15, main ='Smoothed Periodogram Span = 15')
spec.pgram(data, log = "no", spans = 23, main ='Smoothed Periodogram Span = 23')
spec.pgram(model$residuals, log = 'no')
model = auto.arima(data, stepwise = F, approximation = F)
spec.pgram(model$residuals, log = 'no', spans = 7)
spec.pgram(model$residuals, log = 'no', spans = 15)
source('~/.active-rstudio-document', echo=TRUE)
auto.arima(data, stepwise = F, approximation = F)
arma.spec(ma = c(0.5), log = 'no', main = 'Spectral Density MA(1) Theta = 0.5')
model_1b
model
arma.spec(ma = c(0.5, 0.5), log="no", main='Spectral Density')
library(forecast)
arma.spec(ma = c(0.5, 0.5), log="no", main='Spectral Density')
library(astsa)
arma.spec(ma = c(0.5, 0.5), log="no", main='Spectral Density')
arma.spec(ma = c(0.5), log="no", main='Spectral Density')
arma.spec(ma = c(-0.5, -0.5), log="no", main='Spectral Density')
arma.spec(model_1b, log = 'no', main = 'Spectral Density')
library(astsa)
library(forecast)
library(readxl)
data = read_excel("D:/School Stuff/Math/Stats 137/HW 6/deaths-from-homicides-and-suicid.xls",
skip = 10)[,2]
spec.pgram(data, log ='no')#, main = 'Raw Periodogram')
spec.pgram(data, log = "no", spans = 7, main ='Smoothed Periodogram Span = 7')
spec.pgram(data, log = "no", spans = 15, main ='Smoothed Periodogram Span = 15')
spec.pgram(data, log = "no", spans = 23, main ='Smoothed Periodogram Span = 23')
arma.spec(model_1b, log = 'no', main = 'Spectral Density')
model_1b = auto.arima(data, stepwise = F, approximation = F)
arma.spec(model_1b, log = 'no', main = 'Spectral Density')
model_1b
arma.spec(model_1b$coef, log = 'no', main = 'Spectral Density')
arma.spec(ar = c(0.9065), ma = c(-0.5302), log = 'no')
arma.spec(model_1b$coef, log = 'no', main = 'Spectral Density')
model_1b$code
model_1b$coef
arma.spec(ar = c(0.9064854), ma = c(-0.5301745), log = 'no')
model_1b = auto.arima(data, stepwise = F, approximation = F)
arma.spec(ar = c(0.9064854), ma = c(-0.5301745), log = 'no')
arma.spec(model_1b$coef, log = 'no', main = 'Spectral Density')
arma.spec(ar = c(0.9064854), ma = c(-0.5301745), log = 'no')
arma.spec(model_1b$coef, log = 'no', main = 'Spectral Density')
str(model_1b)
model_1b
arma.spec(ar = c(0.9064854), ma = c(-0.5301745), log = 'no', main = 'Spectral Density')
spec.pgram(model$residuals, log = 'no')
arma.spec(ar = c(0.9064854), ma = c(-0.5301745), log = 'no', main = 'Spectral Density')
spec.pgram(model$residuals, log = 'no')
spec.pgram(model_1b$residuals, log = 'no')
spec.pgram(model_1b$residuals)#, log = 'no')
spec.pgram(model_1b$residuals, log = 'no')
arma.spec(ma = c(-0.5, -0.5), log = 'no', main = 'Spectral Density MA(1) Theta = 0.5')
arma.spec(ma = c(-0.5), log = 'no', main = 'Spectral Density')
arma.spec(ma = c(0.5), log = 'no', main = 'Spectral Density')
arma.spec(ma = c(-0.5, -0.5), log = 'no', main = 'Spectral Density Difference')
library(forecast)
trndseas=function(y,seas,lam,degtrnd){
m=length(lam)
n=length(y)
if(degtrnd>0) {
tm=seq(1/n,1,by=1/n)
x1=poly(tm,degree=degtrnd,raw=TRUE)
x1=cbind(rep(1,n),x1)
} else {
x1=as.matrix(rep(1,n),ncol=1)
}
x2=NULL
if(seas>1){
sn=rep(1:seas,length.out=n)
x2=factor(sn,levels=unique(sn),ordered=TRUE)
x2=model.matrix(~x2-1)
m2=ncol(x2)
m21=m2-1
x2=x2[,1:m21]-matrix(rep(x2[,m2],m21),ncol=m21,nrow=nrow(x2),byrow=F)
}
x=cbind(x1,x2)
xx=t(x)%*%x
rsq=rep(1,m)
m1=ncol(x1)
m11=m1+1
mx=ncol(x)
for(i in 1:m) {
if (lam[i]==0) {
yt=log(y)
} else {
yt=y^lam[i]
}
xy=t(x)%*%yt
coef=solve(xx,xy)
fit=x%*%coef
res=yt-fit
ssto=(n-1)*var(yt)
sse=t(res)%*%res
rsq[i]=1-((n-1)/(n-mx))*sse/ssto
}
ii=which.max(rsq)
lamopt=lam[ii]
if (lamopt==0) {
yt=log(y)
} else {
yt=y^lamopt
}
xy=t(x)%*%yt
coef=solve(xx,xy)
fit=x%*%coef
trnd=x1%*%coef[1:m1]
season=NULL
if(seas>1){
season=c(coef[m11:mx],-sum(coef[m11:mx]))
}
res=yt-fit
result=list(coef=coef,fitted=fit,trend=trnd,residual=res,season=season,rsq=rsq,lamopt=lamopt)
return(result)
}
data = read.table("D:/School Stuff/Math/Stats 137/Final/chicago.txt", header=FALSE)
colnames(data) = c('AvgReceipts', 'Date')
#3
#Plot of data
ts.plot(data$AvgReceipts, ylab = 'Avg Receipts',
main = 'TS Plot of Avg Receipts Jan 3 2003 -> Apr 23 2003')
lambdas = seq(-2, 2, 0.1)
#s = 52 for weekly, 12 for monthly, 4 for quarterly, 1 for yearly
s = 52
deg = 2
model = trndseas(data$AvgReceipts, s, lambdas, deg)
model$lamopt
model$season
#Plot of transformed data
ts.plot(data$AvgReceipts^model$lamopt)
#Trend line with transformed data
lines(model$trend, col = 'red')
seas <- rep(mod$season, length.out = 106)
seas <- rep(model$season, length.out = 106)
plot(seas)
ts.plot(seas)
#Plot of transformed data
ts.plot(data$AvgReceipts^model$lamopt)
#Plot of transformed data
ts.plot(data$AvgReceipts^model$lamopt, main = 'Transformed Data Plot + Trend')
#Trend line with transformed data
lines(model$trend, col = 'red')
seas <- rep(model$season, length.out = 106)
ts.plot(seas, main = 'Seasonality Plot')
Acf(model$residual)
Pacf(model$residual)
plot(model$residual)
qqplot(model$residual)
plot(model, which = 1)
plot(model)
auto.arima(model)
auto.arima(model$residual)
deg = 1
model = trndseas(data$AvgReceipts, s, lambdas, deg)
model$lamopt
model$season
#Plot of transformed data
ts.plot(data$AvgReceipts^model$lamopt, main = 'Transformed Data Plot + Trend')
#Trend line with transformed data
lines(model$trend, col = 'red')
#Seasonality Plot
seas <- rep(model$season, length.out = 106)
ts.plot(seas, main = 'Seasonality Plot')
Acf(model$residual)
Pacf(model$residual)
plot(model)
auto.arima(model$residual)
deg = 3 #degree likely to be 1, likely to not be 2,
model = trndseas(data$AvgReceipts, s, lambdas, deg)
model$lamopt
model$season
#Plot of transformed data
ts.plot(data$AvgReceipts^model$lamopt, main = 'Transformed Data Plot + Trend')
#Trend line with transformed data
lines(model$trend, col = 'red')
#Seasonality Plot
seas <- rep(model$season, length.out = 106)
ts.plot(seas, main = 'Seasonality Plot')
Acf(model$residual)
Pacf(model$residual)
auto.arima(model$residual)
#s = 52 for weekly, 12 for monthly, 4 for quarterly, 1 for yearly
s = 12
deg = 1 #degree likely to be 1, likely to not be 2,
model = trndseas(data$AvgReceipts, s, lambdas, deg)
model$lamopt
model$season
#Plot of transformed data
ts.plot(data$AvgReceipts^model$lamopt, main = 'Transformed Data Plot + Trend')
#Trend line with transformed data
lines(model$trend, col = 'red')
#Seasonality Plot
seas <- rep(model$season, length.out = 106)
ts.plot(seas, main = 'Seasonality Plot')
Acf(model$residual)
Pacf(model$residual)
auto.arima(model$residual)
deg = 2 #degree likely to be 1, likely to not be 2,
model = trndseas(data$AvgReceipts, s, lambdas, deg)
model$lamopt
model$season
#Plot of transformed data
ts.plot(data$AvgReceipts^model$lamopt, main = 'Transformed Data Plot + Trend')
#Trend line with transformed data
lines(model$trend, col = 'red')
#Seasonality Plot
seas <- rep(model$season, length.out = 106)
ts.plot(seas, main = 'Seasonality Plot')
Acf(model$residual)
Pacf(model$residual)
auto.arima(model$residual)
#s = 52 for weekly, 12 for monthly, 4 for quarterly, 1 for yearly
s = 52 #maybe 12, maybe 52
deg = 1 #degree likely to be 1, likely to not be 2,
model = trndseas(data$AvgReceipts, s, lambdas, deg)
model$lamopt
model$season
#Plot of transformed data
ts.plot(data$AvgReceipts^model$lamopt, main = 'Transformed Data Plot + Trend')
#Trend line with transformed data
lines(model$trend, col = 'red')
#Seasonality Plot
seas <- rep(model$season, length.out = 106)
ts.plot(seas, main = 'Seasonality Plot')
Acf(model$residual)
Pacf(model$residual)
auto.arima(model$residual)
library(astsa)
library(forecast)
library(readxl)
data = read_excel("D:/School Stuff/Math/Stats 137/HW 6/deaths-from-homicides-and-suicid.xls",
skip = 10)[,2]
spec.pgram(data, log ='no')#, main = 'Raw Periodogram')
arma.spec(ar = c(0.9064854), ma = c(-0.5301745), log = 'no', main = 'Spectral Density')
arma.spec(ma = c(0.5), log = 'no', main = 'Spectral Density')
library(rio)
library(dplyr)
library(grid)
library(caret)
library(ggplot2)
set.seed(10)
rm(list=ls())
testing_dir <- "D:/School Stuff/Math/Stats 141A/Data Files/Project/Default Files"
new_dir <- "D:/School Stuff/Math/Stats 141A/Data Files/Project/New Files"
label_vec = c("airplane", "automobile", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck")
test_batch_function = function(path, test_batch)
{
test_batch = readBin(con = path, what = "integer", n = 10000 * 3073, size = 1, signed = FALSE)
test_batch = matrix(test_batch, nrow = 10000, byrow = TRUE)
test_batch = data.frame(test_batch)
}
load_testing_images = function(input, output)
{
files = list.files(input, pattern = "test_batch.bin*", full.names = TRUE)
test_df = test_batch_function(path = files, test_batch)
dmy_vec = c(rep(0, 10000))
for(i in 1:10000)
{
for(j in 1:10)
{
if(test_df[i,1] == j - 1)
{
dmy_vec[i] = label_vec[j]
}
}
}
dmy_vec = matrix(dmy_vec, nrow = 10000)
dmy_vec = data.frame(dmy_vec)
final_test_df = cbind(dmy_vec, test_df)
setwd(new_dir)
export(final_test_df, "test_batch.rds")
}
load_training_images = function(input, output)
{
data = list.files(input, pattern = "data_batch*", full.names = TRUE)
data = data.frame(data)
data[] = lapply(data, as.character)
for (i in 1:length(data$data))
{
if(i == 1)
{
bin = readBin(con = file(data$data[i], "rb"), what = "integer", n = 3073*10000, size = 1, signed = FALSE)
bin = matrix(bin, nrow = 10000, byrow = TRUE)
bin = data.frame(bin)
}
else
{
bin2 = readBin(con = file(data$data[i], "rb"), what = "integer", n = 3073*10000, size = 1, signed = FALSE)
bin2 = matrix(bin2, nrow = 10000, byrow = TRUE)
bin2 = data.frame(bin2)
bin = rbind(bin, bin2)
}
}
bin$X1 = sapply(bin$X1, as.integer)
dmy_vec = c(rep(0, 50000))
for(i in 1:50000)
{
for(j in 1:10)
{
if(bin[i,1] == j - 1)
{
dmy_vec[i] = label_vec[j]
}
}
}
dmy_vec = matrix(dmy_vec, nrow = 50000)
dmy_vec = data.frame(dmy_vec)
final_test_df = cbind(dmy_vec, bin)
setwd(new_dir)
export(final_test_df, "training_batch.rds")
}
load_testing_images(testing_dir, new_dir)
load_training_images(testing_dir, new_dir)
test_RDS = readRDS("D:/School Stuff/Math/Stats 141A/Data Files/Project/New Files/test_batch.rds")
training_RDS = readRDS("D:/School Stuff/Math/Stats 141A/Data Files/Project/New Files/training_batch.rds")
View(test_RDS)
head(test_RDS)
View(head(test_RDS))
View(head(test_RDS[:10]))
View(head(test_RDS[::10]))
View(head(test_RDS[10]))
View(head(test_RDS[,:10]))
View(head(test_RDS[:10,:]))
View(head(test_RDS[:10]))
View(head(test_RDS[:10,]))
View(head(test_RDS[10]))
View(head(test_RDS))
